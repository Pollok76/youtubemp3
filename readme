Pour repartir sur une base propre et créer un environnement de développement Python dédié pour votre projet, voici les étapes complètes. Cela garantira que toutes les dépendances et configurations sont isolées dans un environnement virtuel.

Étape 1 : Installer Python proprement
Téléchargez la version de Python adaptée à votre système depuis python.org.
Lors de l'installation :
Cochez "Add Python to PATH".
Sélectionnez Customize Installation pour vérifier que pip et venv sont installés.
Cochez "Install for all users" si disponible.
Étape 2 : Configurer un environnement virtuel Python
Créez un dossier pour votre projet :

bash
Copier le code
mkdir youtube_downloader_project
cd youtube_downloader_project
Créez un environnement virtuel isolé :

bash
Copier le code
python -m venv venv
Activez l’environnement virtuel :

Sous Windows :
bash
Copier le code
venv\Scripts\activate
Sous macOS/Linux :
bash
Copier le code
source venv/bin/activate
Vérifiez que l’environnement est activé (vous devriez voir (venv) avant votre invite de commande).

Étape 3 : Installer les dépendances nécessaires
Installez les bibliothèques requises dans l'environnement virtuel :

bash
Copier le code
pip install yt-dlp pyinstaller ffmpeg-python
Installer FFmpeg :

Sous Windows : Téléchargez FFmpeg depuis ffmpeg.org et ajoutez le dossier bin à votre PATH.
Sous Linux/macOS : Installez avec votre gestionnaire de paquets :
bash
Copier le code
sudo apt install ffmpeg  # Debian/Ubuntu
brew install ffmpeg      # macOS
Vérifiez les installations :

bash
Copier le code
python --version
pip --version
yt-dlp --version
ffmpeg -version
Étape 4 : Créez le script Python
Dans votre dossier projet, créez un fichier youtube_music_gui.py avec ce contenu :

python
Copier le code
import os
import tkinter as tk
from tkinter import filedialog, messagebox
import yt_dlp

def download_audio(url, output_directory):
    try:
        # Options pour yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': os.path.join(output_directory, '%(title)s.%(ext)s'),
        }

        # Téléchargement
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        messagebox.showinfo("Succès", "Téléchargement et conversion terminés.")
    except Exception as e:
        messagebox.showerror("Erreur", f"Une erreur est survenue : {e}")

def download_button_action(url_entry, output_dir_label):
    url = url_entry.get()
    output_directory = output_dir_label.cget("text")

    if not url:
        messagebox.showerror("Erreur", "Veuillez entrer une URL YouTube valide.")
        return

    download_audio(url, output_directory)

def choose_output_directory(output_dir_label):
    directory = filedialog.askdirectory()
    if directory:
        output_dir_label.config(text=directory)

def create_interface():
    # Fenêtre principale
    root = tk.Tk()
    root.title("Téléchargeur de Musique YouTube")

    # URL Label et Entry
    tk.Label(root, text="Entrez l'URL de la vidéo YouTube :").pack(pady=5)
    url_entry = tk.Entry(root, width=50)
    url_entry.pack(pady=5)

    # Choisir le dossier de sortie
    tk.Label(root, text="Dossier de sortie :").pack(pady=5)
    output_dir_label = tk.Label(root, text=os.getcwd(), relief="sunken", width=50)
    output_dir_label.pack(pady=5)

    choose_dir_button = tk.Button(root, text="Choisir un dossier", command=lambda: choose_output_directory(output_dir_label))
    choose_dir_button.pack(pady=5)

    # Bouton de téléchargement
    download_button = tk.Button(root, text="Télécharger", command=lambda: download_button_action(url_entry, output_dir_label))
    download_button.pack(pady=20)

    # Lancer l'application
    root.mainloop()

if __name__ == "__main__":
    create_interface()
Étape 5 : Testez le script
Exécutez le script dans votre environnement virtuel :

bash
Copier le code
python youtube_music_gui.py
Vérifiez que l’interface fonctionne correctement :

Entrez une URL YouTube.
Choisissez un dossier de sortie.
Cliquez sur "Télécharger".
Étape 6 : Créez l’exécutable avec PyInstaller
Nettoyez et préparez votre environnement :

bash
Copier le code
pip install pyinstaller
Créez un fichier .exe avec cette commande :

bash
Copier le code
pyinstaller --onefile --noconsole youtube_music_gui.py
Trouvez l’exécutable dans le dossier dist.

Étape 7 : Résolution des erreurs courantes
FFmpeg introuvable : Vérifiez que ffmpeg est installé et ajouté au PATH.
PermissionError : Exécutez le terminal en tant qu’administrateur.
Module introuvable : Installez toutes les dépendances dans l’environnement virtuel.
Étape 8 : Réutilisation et partage
Pour partager votre projet :

Distribuez uniquement l’exécutable généré dans le dossier dist.
Fournissez les instructions pour installer FFmpeg si nécessaire.
Avec cette méthode, votre environnement de développement est isolé et reproductible, garantissant moins d’erreurs.
